<<<<<<< HEAD
from typing import Union, Tuple
=======
from typing import Union, Tuple, Optional
>>>>>>> 3-add-filter-code
from pathlib import Path
import re
import os

from utils.read_write_model import (
    read_images_text,
    read_images_binary,
    write_images_text,
    write_images_binary,
)
from utils.read_write_model import Image
from utils.quaternion_transform import world_coordinates, colmap_coordinates, add_vector

import numpy as np


PathLikeObject = Union[str, Path]
<<<<<<< HEAD
pattern = re.compile("ios_([0-9]*).jpg")
=======
pattern = re.compile("[_]?([0-9]+).jpg", re.IGNORECASE)
>>>>>>> 3-add-filter-code


def add_noise(
    path_to_images: PathLikeObject,
<<<<<<< HEAD
    path_to_output: PathLikeObject = "./images_sampled.bin",
    probability: float = 0.15,
    noise_scale: float = 1,
=======
    path_to_output: Optional[PathLikeObject] = None,
    probability: float = 0.15,
    noise_scale: float = 1,
    uniform: bool = True,
>>>>>>> 3-add-filter-code
) -> Tuple[str]:
    """Add noise to each of the images
    from COLMAP reconstruction with a
    probability of parameter.

    Parameters
        --------------
        path_to_images : PathLikeObject
            Path to the images file from the COLMAP reconstruction.
            It's not recommended to set the original images file
            because of the risk of information loss. Make a copy
            of the sparse reconstruction directory.
<<<<<<< HEAD
        path_to_output : PathLikeObject = ./images_sampled.bin
=======
        path_to_output : Optional[PathLikeObject] = None
>>>>>>> 3-add-filter-code
            The path to the output images file with noise on
            some images. If the path_to_output is equal to the
            path_to_images, the source images file will be removed.
        probability : float = 0.15
            The approximate proportion of noised data.
        noise_scale: float = 1
            Standard deviation of a random noise variable.
<<<<<<< HEAD
    """
    path_to_images = Path(path_to_images)
    path_to_output = Path(path_to_output)
=======
        uniform : bool = True
            If it's true, the noise that generated by
            the uniform distribution is used. Otherwise,
            the normal one is used.
    """
    path_to_images = Path(path_to_images)
>>>>>>> 3-add-filter-code

    read_method = (
        read_images_text if str(path_to_images).endswith(".txt") else read_images_binary
    )

    images = read_method(path_to_images)

    threshold = 1 - probability
    noised = []

    print("Noising image poses...")

    for key, image in images.items():
        if np.random.rand() > threshold:
<<<<<<< HEAD
            noise = np.random.standard_normal((3, 1)) * noise_scale
=======
            if uniform:
                noise = np.random.uniform(-1, 1, (3, 1)) * noise_scale
            else:
                noise = np.random.standard_normal((3, 1)) * noise_scale
>>>>>>> 3-add-filter-code
            images[key] = Image(
                id=image[0],
                qvec=image[1],
                tvec=add_vector(image[1], image[2], noise)[:, 0],
                camera_id=image[3],
                name=image[4],
                xys=image[5],
                point3D_ids=image[6],
            )
            noised.append(re.search(pattern, image[4])[1])

<<<<<<< HEAD
    if path_to_images == path_to_output:
        os.remove(path_to_images)
        path_to_output = Path(
            str(path_to_output)[:-4] + "_sampled" + str(path_to_output)[-4:]
        )
=======
    if path_to_output is None:
        path_to_output = Path(
            str(path_to_images)[:-4] + "_sampled" + str(path_to_images)[-4:]
        )

    if path_to_images == path_to_output:
        os.remove(path_to_images)

>>>>>>> 3-add-filter-code
    write_method = (
        write_images_text
        if str(path_to_output).endswith(".txt")
        else write_images_binary
    )
    write_method(images, path_to_output)

    result = set(noised)

    print(
        f"{len(noised)} poses out of {len(images)} were noised ({round(len(noised)/len(images)*100, 1)}%):"
    )
    print(result)

    return result, path_to_output
